import{r as t,o as c,c as l,e as s,b as e,d as r,a as i}from"./app.137f2748.js";const p=e("h1",{id:"botastic-api",tabindex:"-1"},[r("Botastic API "),e("a",{class:"header-anchor",href:"#botastic-api","aria-hidden":"true"},"#")],-1),h=e("h2",{id:"create-indexes",tabindex:"-1"},[r("Create Indexes "),e("a",{class:"header-anchor",href:"#create-indexes","aria-hidden":"true"},"#")],-1),_=e("p",null,"This API will create an index with the given index name.",-1),u=i(`<h3 id="response" tabindex="-1">Response <a class="header-anchor" href="#response" aria-hidden="true">#</a></h3><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">@TODO</span></span>
<span class="line"></span></code></pre></div><h2 id="search-indexes" tabindex="-1">Search Indexes <a class="header-anchor" href="#search-indexes" aria-hidden="true">#</a></h2>`,3),m=e("p",null,"This API will search a specific index with keywords",-1),x=i(`<h3 id="response-1" tabindex="-1">Response <a class="header-anchor" href="#response-1" aria-hidden="true">#</a></h3><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">@TODO</span></span>
<span class="line"></span></code></pre></div>`,2),T=JSON.parse('{"title":"Botastic API","description":"","frontmatter":{},"headers":[{"level":2,"title":"Create Indexes","slug":"create-indexes","link":"#create-indexes","children":[{"level":3,"title":"Response","slug":"response","link":"#response","children":[]}]},{"level":2,"title":"Search Indexes","slug":"search-indexes","link":"#search-indexes","children":[{"level":3,"title":"Response","slug":"response-1","link":"#response-1","children":[]}]}],"relativePath":"references/botastic/api.md"}'),b={name:"references/botastic/api.md"},A=Object.assign(b,{setup(f){const o=[{name:"name",type:"string",required:!0,description:"the name of index"},{name:"object_id",type:"string",where:"json",required:!0,description:"the object id of the record to be indexed"},{name:"category",type:"string",where:"json",required:!0,description:'the category of the record to be indexed. Please use "plain-text"'},{name:"data",type:"string",where:"json",required:!0,description:'the data of the record to be indexed. For "plain-text" category, this field should be the plain text of the record.'},{name:"properties",type:"string",where:"json",required:!1,description:"any additional properties of the record to be indexed."}],d=[{name:"keywords",type:"string",required:!0,description:"the keywords to be searched"},{name:"index_name",type:"string",required:!1,description:"the name of index. If not provided, all indexes that owned by current app_id will be searched."},{name:"n",type:"number",where:"json",required:!1,description:"the number of results to be returned. Maximum is 128."}];return(g,y)=>{const a=t("APIEndpoint"),n=t("APIParams");return c(),l("div",null,[p,h,s(a,{method:"GET",url:"/indexes/:name"}),_,s(n,{params:o}),u,s(a,{method:"GET",url:"/search?keywords=:keywords&index_name=:index_name&n=:n"}),m,s(n,{params:d}),x])}}});export{T as __pageData,A as default};
