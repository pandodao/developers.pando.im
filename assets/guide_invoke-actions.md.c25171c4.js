import{_ as s,o as n,c as a,a as o}from"./app.0fa8e07e.js";const C=JSON.parse('{"title":"Invoke Actions","description":"","frontmatter":{},"headers":[{"level":2,"title":"Generate Actions by SDK","slug":"generate-actions-by-sdk","link":"#generate-actions-by-sdk","children":[]},{"level":2,"title":"Generate Actions Manually","slug":"generate-actions-manually","link":"#generate-actions-manually","children":[]},{"level":2,"title":"Send Transactions","slug":"send-transactions","link":"#send-transactions","children":[]}],"relativePath":"guide/invoke-actions.md"}'),l={name:"guide/invoke-actions.md"},e=o(`<h1 id="invoke-actions" tabindex="-1">Invoke Actions <a class="header-anchor" href="#invoke-actions" aria-hidden="true">#</a></h1><p>Pando are a set of a blockchain based protocols, which are designed to be executed by sending transactions to Pando&#39;s MTG.</p><p>For example, if you want to get information from the protocols, call the APIs and read the response is the easiest way. But if you want to interact with the protocols, tell the protocols what you want to do, with cryptocurrency as the medium, you need to send transactions to Pando&#39;s MTG.</p><p>The <code>Action Protocol</code> to illustrate behaviors of each transaction. The Action Protocol is basically a bytes array, which is encoded in the transaction memo field.</p><p>When you send a transaction to Pando&#39;s MTG, MTG Nodes will try to decode the memo field and execute the action.</p><h2 id="generate-actions-by-sdk" tabindex="-1">Generate Actions by SDK <a class="header-anchor" href="#generate-actions-by-sdk" aria-hidden="true">#</a></h2><p>Although action are encoded in bytes, you can easily generate them by using the <a href="https://github.com/fox-one/4swap-sdk-go" target="_blank" rel="noreferrer">4swap SDK</a>, to simplify the process.</p><p>The following example showcases how to generate a swap action by <code>mtg.SwapAction</code>:</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// the ID to trace the orders</span></span>
<span class="line"><span style="color:#A6ACCD;">followID</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> _ </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> uuid</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">NewV4</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// build a swap action, specified the parameters</span></span>
<span class="line"><span style="color:#A6ACCD;">action </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> mtg</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">SwapAction</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">    receiverID</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    followID</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">String</span><span style="color:#89DDFF;">(),</span></span>
<span class="line"><span style="color:#A6ACCD;">    OutputAssetID</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    preOrder</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Routes</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// the minimum amount of asset you will get.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// you may want to change this value to a number which is less than preOrder.FillAmount</span></span>
<span class="line"><span style="color:#A6ACCD;">    preOrder</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">FillAmount</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Div</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">decimal</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">NewFromFloat</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0.005</span><span style="color:#89DDFF;">)),</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// generate the memo</span></span>
<span class="line"><span style="color:#A6ACCD;">memo</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> action</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Encode</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">group</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">PublicKey</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> err</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">log</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">memo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> memo</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><h2 id="generate-actions-manually" tabindex="-1">Generate Actions Manually <a class="header-anchor" href="#generate-actions-manually" aria-hidden="true">#</a></h2><p>[WIP]</p><h2 id="send-transactions" tabindex="-1">Send Transactions <a class="header-anchor" href="#send-transactions" aria-hidden="true">#</a></h2><p>// There are several ways to send transactions to Pando&#39;s MTG. For testing purpose, you can use <code>mixin-cli</code>. For production, you may need to use the <a href="https://github.com/fox-one/mixin-sdk-go" target="_blank" rel="noreferrer">mixin-sdk-go</a> or other SDKs to do that.</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-TGjor" id="tab-m4_Bqey" checked="checked"><label for="tab-m4_Bqey">mixin-sdk-go</label><input type="radio" name="group-TGjor" id="tab-D9wc_fl"><label for="tab-D9wc_fl">mixin-cli</label></div><div class="blocks"><div class="language-go active"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">client </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> mixin</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">NewFromKeystore</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">keystore</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">tx</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> client</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Transaction</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">mixin</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">TransferInput</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  AssetID</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> payAssetID</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  Amount</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">  decimal</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">RequireFromString</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">amount</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">  TraceID</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> mixin</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">RandomTraceID</span><span style="color:#89DDFF;">(),</span></span>
<span class="line"><span style="color:#A6ACCD;">  Memo</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">$YOUR_MEMO_HERE</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  OpponentMultisig</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    Receivers </span><span style="color:#89DDFF;">[]</span><span style="color:#C792EA;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">json:&quot;receivers,omitempty&quot;</span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#A6ACCD;">    Threshold </span><span style="color:#C792EA;">uint8</span><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">json:&quot;threshold,omitempty&quot;</span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}{</span></span>
<span class="line"><span style="color:#A6ACCD;">    Receivers</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> members</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">          </span></span>
<span class="line"><span style="color:#A6ACCD;">    Threshold</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">uint8</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">threshold</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">pin</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">mixin-cli</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-f</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">./keystore.json</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">transfer</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--asset</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">965e5c6e-434c-3fa9-b780-c50f43cd955c</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">--amount </span><span style="color:#F78C6C;">100</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">--receivers $MEMBERS_1 \\</span></span>
<span class="line"><span style="color:#A6ACCD;">--receivers $MEMBERS_2 \\</span></span>
<span class="line"><span style="color:#A6ACCD;">--receivers $MEMBERS_3 \\</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># ...</span></span>
<span class="line"><span style="color:#FFCB6B;">--threshold</span><span style="color:#A6ACCD;"> $THRESHOLD \\</span></span>
<span class="line"><span style="color:#A6ACCD;">--memo $YOUR_MEMO_HERE</span></span>
<span class="line"></span></code></pre></div></div></div><p>Please note that the <code>members</code> field contains an array of UUIDs, which presents the members of the MTG. The <code>threshold</code> field is the multisig threshold of the MTG. You can get the members and threshold from <code>/info</code> API.</p>`,15),p=[e];function t(c,r,i,D,y,A){return n(),a("div",null,p)}const d=s(l,[["render",t]]);export{C as __pageData,d as default};
